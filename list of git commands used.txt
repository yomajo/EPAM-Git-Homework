1
git init

2
git add some_file.txt
git commit -m "initial commit to local repo"

4
git remote add origin https://github.com/yomajo/EPAM-Git-Homework.git
git branch -M main
git push -u origin main

5
git branch develop
git checkout develop

6
git branch develop-feaure1
git checkout develop-feaure1

7
git add some_file.txt
git commit -m "adding a txt line from develop-feaure1 branch"
git push --set-upstream origin develop-feaure1

# push develop in order to access it on clone repo:
git checkout develop
git commit --allow-empty -m "push develop branch (=main) at the time of commit"
git push --set-upstream origin develop

8

git clone https://github.com/yomajo/EPAM-Git-Homework
#create a local brand with name "feature2" in closed repo from remote branch "develop"

9
git checkout -b feature2 origin/develop

10
git add some_file.txt
git commit -m "change in line1 from feature2 branch"
# changes are pushed to develop remote branch from local feature2 beanch..
git push origin HEAD:develop

#In reality I was supposed to do, push, merge to develop, then push, like:
git push origin feature2
git checkout develop
git merge feature2


11
#switched to original local repo (folder) with develop branch active

12
#imitating user1 (working on original folder repo)
git merge develop-feaure1

# at this point user1 locally has different txt file than remote
# (last updated by user2 (cloned repo)

# git push throws error
git pull
#navigate to some_text.txt and select which changes to accept or reject

git add some_file.txt
# commit msg is ready by vscode:
# Merge branch 'develop' of https://github.com/yomajo/EPAM-Git-Homework into develop
git push

# finishing touches:
git checkout main
git merge develop

#git add .md task file and all used commands, commit, push...










